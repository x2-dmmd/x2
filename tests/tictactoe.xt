:: x2.0 only

:main
    jmp init

:init
    psh " " a1
    psh " " a2
    psh " " a3
    psh " " b1
    psh " " b2
    psh " " b3
    psh " " c1
    psh " " c2
    psh " " c3
    psh 0 mvs
    psh "X" plr
    jmp mov

:mov
    jmp dsp
    out "[$(pop plr)] Select a coordinate to play your move"
    read "> " crd
    lwr crd
    psh 0 vld
    evl "$(pop crd)" == "a1" "psh 1 vld"
    evl "$(pop crd)" == "a2" "psh 1 vld"
    evl "$(pop crd)" == "a3" "psh 1 vld"
    evl "$(pop crd)" == "b1" "psh 1 vld"
    evl "$(pop crd)" == "b2" "psh 1 vld"
    evl "$(pop crd)" == "b3" "psh 1 vld"
    evl "$(pop crd)" == "c1" "psh 1 vld"
    evl "$(pop crd)" == "c2" "psh 1 vld"
    evl "$(pop crd)" == "c3" "psh 1 vld"
    evl vld == "1" "jmp nxt" "jmp mov"

:nxt
    evl "$(pop crd)" != " " "jmp mov"
    psh "$(pop plr)" "$(pop crd)"
    add mvs 1 mvs
    evl "$(pop plr)" == "X" "psh O plr" "psh X plr"
    psh 0 win
    psh "c" stg

    :: row a
    evl "$(pop a1)" == "$(pop a2)" "add stg c stg"
    evl "$(pop a2)" == "$(pop a3)" "add stg c stg"
    evl "$(pop a3)" != " " "add stg c stg"
    out "$(pop stg)"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: row b
    evl "$(pop b1)" == "$(pop b2)" "add stg c stg"
    evl "$(pop b2)" == "$(pop b3)" "add stg c stg"
    evl "$(pop b3)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: row c
    evl "$(pop c1)" == "$(pop c2)" "add stg c stg"
    evl "$(pop c2)" == "$(pop c3)" "add stg c stg"
    evl "$(pop c3)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: column 1
    evl "$(pop a1)" == "$(pop b1)" "add stg c stg"
    evl "$(pop b1)" == "$(pop c1)" "add stg c stg"
    evl "$(pop c1)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: column 2
    evl "$(pop a2)" == "$(pop b2)" "add stg c stg"
    evl "$(pop b2)" == "$(pop c2)" "add stg c stg"
    evl "$(pop c2)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: column 3
    evl "$(pop a3)" == "$(pop b3)" "add stg c stg"
    evl "$(pop b3)" == "$(pop c3)" "add stg c stg"
    evl "$(pop c3)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: diagonal lt-rb
    evl "$(pop a1)" == "$(pop b2)" "add stg c stg"
    evl "$(pop b2)" == "$(pop c3)" "add stg c stg"
    evl "$(pop c3)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    :: diagonal rt-lb
    evl "$(pop a3)" == "$(pop b2)" "add stg c stg"
    evl "$(pop b2)" == "$(pop c1)" "add stg c stg"
    evl "$(pop c1)" != " " "add stg c stg"
    evl "$(pop stg)" == "cccc" "psh 1 win"
    evl "$(pop win)" != "1" "psh c stg"

    evl win == "1" "jmp win" "jmp det"

:det
    evl mvs == 9 "jmp stl" "jmp mov"

:stl
    jmp dsp
    out "It's a draw!"
    out "Press [ENTER] to play again!"
    read "" -
    jmp init

:win
    evl "$(pop plr)" == "X" "psh O plr" "psh X plr"
    jmp dsp
    out "Congradulations, $(pop plr), you won!"
    out "Press [ENTER] to play again!"
    read "" -
    jmp init

:dsp
    cls
    out "    1   2   3
    out "  +---+---+---+"
    out "a | $(pop a1) | $(pop a2) | $(pop a3) |"
    out "  +---+---+---+"
    out "b | $(pop b1) | $(pop b2) | $(pop b3) |"
    out "  +---+---+---+"
    out "c | $(pop c1) | $(pop c2) | $(pop c3) |"
    out "  +---+---+---+"