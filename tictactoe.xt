:: Tic-Tac-Toe
:: Version x2.1 - x2.1
:: Made by DmmD

:: Imports
imp "pkg/stdlib/color"
imp "pkg/stdlib/system"

:: Public Methods
:: Entry
:main
    :: Clears screen
    cls

    :: Start menu
    out "$(call byellowf \"Welcome to Tic-Tac-Toe!\" -)$(call reset -)"
    out "$(call bblackf \"\t- Made by DmmD\" -)$(call reset -)"
    out ""
    out "$(call greenf \"Press [ENTER] to start!\" -)$(call reset -)"
    read "" -

    :: Set-up
    jmp init

:: Initializes Board
:init
    :: Clears screen
    cls

    :: Clears board
    psh " " a1
    psh " " a2
    psh " " a3
    psh " " b1
    psh " " b2
    psh " " b3
    psh " " c1
    psh " " c2
    psh " " c3
    psh "X" plr
    psh 0 ctr

    :: Selects mode
    out "Choose an opponent"
    out "  [s] Self (Default)"
    out "  [c] Computer"
    read "> " mode
    lwr mode
    evl mode == "c" "psh \"cmp\" mode" "psh \"slf\" mode"
    
    :: Starts game
    evl mode == "slf" "jmp mvt"
    out "Choose a side to play as"
    out "  [x] You play first (Default)"
    out "  [o] Computer plays first"
    read "> " side
    lwr side
    evl side == "o" "jmp cmpt" "jmp mvt"

:: Moves tile
:mvt
    :: Starts round
    jmp dsp
    jmp nxt

:: Displays game
:dsp
    :: Clears screen
    cls

    :: Displays board
    out "    1   2   3"
    out "  +---+---+---+"
    out "a | $(call tle a1 - ) | $(call tle a2 - ) | $(call tle a3 - ) |"
    out "  +---+---+---+"
    out "b | $(call tle b1 - ) | $(call tle b2 - ) | $(call tle b3 - ) |"
    out "  +---+---+---+"
    out "c | $(call tle c1 - ) | $(call tle c2 - ) | $(call tle c3 - ) |"
    out "  +---+---+---+"

:: Game manager
:nxt
    :: Selects coordinate
    out "[$(pop plr )] Select a coordinate to play your move"
    read "> " crd
    lwr crd
    psh 0 chk
    evl crd == "a1" "psh 1 chk"
    evl crd == "a2" "psh 1 chk"
    evl crd == "a3" "psh 1 chk"
    evl crd == "b1" "psh 1 chk"
    evl crd == "b2" "psh 1 chk"
    evl crd == "b3" "psh 1 chk"
    evl crd == "c1" "psh 1 chk"
    evl crd == "c2" "psh 1 chk"
    evl crd == "c3" "psh 1 chk"
    evl chk == 0 "jmp mvt"
    pop "$(pop crd)" chk
    evl chk != " " "jmp mvt"
    
    :: Places tile
    psh plr "$(pop crd)"
    evl plr == "X" "psh \"O\" plr" "psh \"X\" plr"
    add ctr 1 ctr
    jmp vld
    evl mode == "slf" "jmp mvt" "jmp cmpt"

:: Checks for win
:vld
    :: Validators
    psh 0 win
    psh 0 chk

    :: Row a
    evl a1 == a2 "add chk 1 chk"
    evl a2 == a3 "add chk 1 chk"
    evl a3 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Row b
    evl b1 == b2 "add chk 1 chk"
    evl b2 == b3 "add chk 1 chk"
    evl b3 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Row c
    evl c1 == c2 "add chk 1 chk"
    evl c2 == c3 "add chk 1 chk"
    evl c3 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Column 1
    evl a1 == b1 "add chk 1 chk"
    evl b1 == c1 "add chk 1 chk"
    evl c1 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Column 2
    evl a2 == b2 "add chk 1 chk"
    evl b2 == c2 "add chk 1 chk"
    evl c2 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Column 3
    evl a3 == b3 "add chk 1 chk"
    evl b3 == c3 "add chk 1 chk"
    evl c3 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Diagonal Top-Left Bottom-Right
    evl a1 == b2 "add chk 1 chk"
    evl b2 == c3 "add chk 1 chk"
    evl c3 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Diagonal Top-Right Bottom-Left
    evl a3 == b2 "add chk 1 chk"
    evl b2 == c1 "add chk 1 chk"
    evl c1 != " " "add chk 1 chk"
    evl chk == 3 "add win 1 win"
    psh 0 chk

    :: Checks for wins
    evl win >= 1 "jmp wins"
    evl ctr == 9 "jmp drws"

:: Computer move
:cmpt
    :: Computer move
    call gtt ctle
    psh plr "$(pop ctle)"
    evl plr == "X" "psh \"O\" plr" "psh \"X\" plr"
    add ctr 1 ctr
    jmp vld
    jmp mvt    

:: Gets random valid tile
:gtt
    :: Gets random tile
    rng 0 8 ctle

    :: Maps tile
    evl ctle == 0 "psh \"a1\" ctle"
    evl ctle == 1 "psh \"a2\" ctle"
    evl ctle == 2 "psh \"a3\" ctle"
    evl ctle == 3 "psh \"b1\" ctle"
    evl ctle == 4 "psh \"b2\" ctle"
    evl ctle == 5 "psh \"b3\" ctle"
    evl ctle == 6 "psh \"c1\" ctle"
    evl ctle == 7 "psh \"c2\" ctle"
    evl ctle == 8 "psh \"c3\" ctle"

    :: Checks tile
    pop "$(pop ctle)" cnt
    evl cnt == " " "out \"test\""
    evl cnt != " " "call gtt ctle"
    ret ctle
    

:: Win screen
:wins
    :: Win screen
    jmp dsp
    evl plr == "X" "psh \"O\" plr" "psh \"X\" plr"
    out "Congratulations, $(pop plr ), you won!"
    out "Press [ENTER] to play again!"
    read "" -
    jmp init

:: Draw screen
:drws
    :: Draw screen
    jmp dsp
    out "It's a draw!"
    out "Press [ENTER] to play again!"
    read "" -
    jmp init

:: Draws tile
:tle
    :: Draws tiles
    evl _a1 == "X" "call redf _a1 _a1"
    evl _a1 == "O" "call bluef _a1 _a1"
    add _a1 "$(call reset -)" _a1
    ret _a1